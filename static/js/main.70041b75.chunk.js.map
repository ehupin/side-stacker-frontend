{"version":3,"sources":["App.js","index.js"],"names":["io","require","GameStatuses","Object","freeze","WaitingForConnection","alue","message","WaitingForOpponentToConnect","value","WaitingForPlayerMove","WaitingForOpponentMove","PlayerWon","OpponentWon","Draw","App","props","socket","state","gameMatrix","gameId","playerId","status","that","on","data","Array","from","length","game_matrix_size","e","setState","player_id","game_id","game_is_full","editedGameTable","row","column","game_is_draw","game_is_won","rowIndex","side","this","emit","playableRows","playable","indexOf","push","statusKey","keys","find","key","statusMessage","canPlay","id","currentPlayer","map","className","enabled","clickHandler","addButtonClicked","columnIndex","classNames","cell","player0","player1","React","Component","PlayerInfo","playerStats","AddPieceButton","symbol","button","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70041b75.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from \"classnames\";\r\nimport './App.css';\r\nconst io = require(\"socket.io-client\")\r\n\r\n// define game statuses and related messages\r\nconst GameStatuses = Object.freeze({\r\n  WaitingForConnection: {\r\n    alue: 0,\r\n    message: 'Wait for connection to server...'},\r\n  WaitingForOpponentToConnect: {\r\n    value: 1,\r\n    message: 'Wait for opponent connection...'},\r\n  WaitingForPlayerMove: {\r\n    value: 2,\r\n    message: 'Play !'},\r\n  WaitingForOpponentMove: {\r\n    value: 3,\r\n    message: 'Wait for opponent to play...'},\r\n  PlayerWon: {\r\n    value: 4,\r\n    message: 'You win :)'},\r\n  OpponentWon: {\r\n    value: 5,\r\n    message: 'You loose :('},\r\n  Draw: {\r\n    value: 6,\r\n    message: 'Draw :/'},\r\n})\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const socket = io(\"https://side-stacker.herokuapp.com/\")\r\n\r\n    this.state = {\r\n      gameMatrix: [],\r\n      socket,\r\n      gameId:null,\r\n      playerId:null,\r\n      status: GameStatuses.WaitingForConnection.value\r\n    };\r\n\r\n    // wait for server connection and game to be joined\r\n    const that = this\r\n    socket.on('connect', function() {\r\n      socket.on('player_joined_game', (data)=>{\r\n\r\n        // if current player is joining the game (i.e. not player id has been defined yet)\r\n        if (that.state.playerId === null){\r\n\r\n          // create a matrix made of \"null\"\r\n          const gameMatrix = Array.from(\r\n            {length: data.game_matrix_size},\r\n            e => Array.from(\r\n              {length: data.game_matrix_size},\r\n                e => null\r\n            )\r\n          );\r\n\r\n          that.setState({\r\n            playerId: data.player_id,\r\n            gameId: data.game_id,\r\n            gameMatrix,\r\n          })\r\n        }\r\n\r\n        // update game status\r\n        let status\r\n        if (data.game_is_full){\r\n          status = that.state.playerId === 0 ? GameStatuses.WaitingForPlayerMove.value : GameStatuses.WaitingForOpponentMove.value\r\n        } else {\r\n          status = GameStatuses.WaitingForOpponentToConnect.value\r\n        }\r\n        that.setState({status})\r\n      })\r\n    });\r\n\r\n    // update component when a piece is added\r\n    socket.on('piece_added', (data)=>{\r\n\r\n      // duplicate and update game matrix\r\n      const editedGameTable = [...this.state.gameMatrix]\r\n      editedGameTable[data.row][data.column] = data.player_id\r\n\r\n      // update game status\r\n      let status\r\n      if (data.game_is_draw){\r\n        status = GameStatuses.Draw.value\r\n      } else if (data.game_is_won){\r\n        if (that.state.playerId === data.player_id){\r\n          status = GameStatuses.PlayerWon.value\r\n        } else {\r\n          status = GameStatuses.OpponentWon.value\r\n        }\r\n      } else {\r\n        if (that.state.playerId === data.player_id){\r\n          status = GameStatuses.WaitingForOpponentMove.value\r\n        } else {\r\n          status = GameStatuses.WaitingForPlayerMove.value\r\n        }\r\n      }\r\n      this.setState({gameMatrix:editedGameTable, status})\r\n    })\r\n  }\r\n\r\n  addButtonClicked(rowIndex, side){\r\n    // notify server for player move (if player is allowed to play)\r\n    if (this.state.status === GameStatuses.WaitingForPlayerMove.value){\r\n      this.state.socket.emit('add_piece', {rowIndex, side})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // list playable row in game matrix (i.e. one with no remaining null values)\r\n    const playableRows = []\r\n    for (const row of this.state.gameMatrix){\r\n      const playable = row.indexOf(null) !== -1\r\n      playableRows.push(playable)\r\n    }\r\n\r\n    // get status message from game status\r\n    const statusKey = Object.keys(GameStatuses).find((key) => {\r\n      return GameStatuses[key].value === this.state.status\r\n    })\r\n    const statusMessage = GameStatuses[statusKey].message\r\n\r\n    // check if user can play\r\n    const canPlay = this.state.status === GameStatuses.WaitingForPlayerMove.value\r\n\r\n    return (\r\n      <div id=\"game\">\r\n        <div id=\"header\">\r\n          <div id=\"title\">Side Stacker</div>\r\n          <div id=\"details\">\r\n            <div>Game ID: {this.state.gameId}</div>\r\n          </div>\r\n          <div id=\"playerHeader\">\r\n            <PlayerInfo playerId={0} currentPlayer={this.state.playerId}/>\r\n            <PlayerInfo playerId={1} currentPlayer={this.state.playerId}/>\r\n          </div>\r\n          <div id=\"info\">\r\n            {statusMessage}\r\n          </div>\r\n        </div>\r\n        <div id=\"board\">\r\n          {this.state.gameMatrix.map((row, rowIndex) => (\r\n            <div className='row' key={rowIndex}>\r\n\r\n              <AddPieceButton side={0}\r\n                              enabled={canPlay && playableRows[rowIndex]}\r\n                              clickHandler={()=>this.addButtonClicked(rowIndex, 0)}/>\r\n\r\n              {row.map((column, columnIndex) => (\r\n                <div key={columnIndex}\r\n                     className={\r\n                       classNames({\r\n                         cell: true,\r\n                         player0: this.state.gameMatrix[rowIndex][columnIndex] === 0,\r\n                         player1: this.state.gameMatrix[rowIndex][columnIndex] === 1,\r\n                       })\r\n                     }>\r\n                </div>\r\n              ))}\r\n\r\n              <AddPieceButton side={1}\r\n                              enabled={canPlay && playableRows[rowIndex]}\r\n                              clickHandler={()=>this.addButtonClicked(rowIndex, 1)}/>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass PlayerInfo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classNames({\r\n        playerStats: true,\r\n        player0: this.props.playerId === 0,\r\n        player1: this.props.playerId === 1,\r\n      })}>\r\n        <div>\r\n          Player {this.props.playerId + 1}\r\n          {this.props.playerId === this.props.currentPlayer &&\r\n          <span className=\"currentPlayerYouString\">(you)</span>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass AddPieceButton extends React.Component {\r\n  render() {\r\n    const symbol = this.props.side === 0 ? '▶' : '◀'\r\n    return (\r\n      <div className={classNames({button: true, enabled: this.props.enabled})}\r\n           onClick={this.props.clickHandler}>\r\n        {symbol}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}