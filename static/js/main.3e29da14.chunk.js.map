{"version":3,"sources":["config.js","App.js","index.js"],"names":["module","exports","serverUrl","io","require","config","GameStatuses","Object","freeze","WaitingForConnection","value","message","WaitingForOpponentToConnect","WaitingForPlayerMove","WaitingForOpponentMove","PlayerWon","OpponentWon","Draw","GameModes","App","props","socket","state","gameMode","gameMatrix","gameId","playerId","status","that","on","data","Array","from","length","game_matrix_size","e","setState","player_id","game_id","game_is_full","editedGameTable","row","column","game_is_draw","game_is_won","this","emit","id","joinFunction","joinGameClicked","bind","parentState","React","Component","StartupHeader","type","className","onClick","GameBoard","rowIndex","side","playableRows","playable","indexOf","push","statusKey","keys","find","key","statusMessage","canPlay","currentPlayer","map","enabled","clickHandler","addButtonClicked","columnIndex","classNames","cell","player0","player1","PlayerInfo","playerStats","AddPieceButton","symbol","button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e29da14.chunk.js","sourcesContent":["const config = {\r\n  serverUrl: \"https://side-stacker.herokuapp.com/\"\r\n};\r\n\r\nmodule.exports = config\r\n","import React from 'react';\r\nimport classNames from \"classnames\";\r\n\r\nconst io = require(\"socket.io-client\")\r\n\r\nimport './App.css';\r\n\r\nconst config = require('./config');\r\n\r\n// define game statuses and related messages\r\nconst GameStatuses = Object.freeze({\r\n  WaitingForConnection: {\r\n    value: 0,\r\n    message: 'Wait for connection to server...'\r\n  },\r\n  WaitingForOpponentToConnect: {\r\n    value: 1,\r\n    message: 'Wait for opponent connection...'\r\n  },\r\n  WaitingForPlayerMove: {\r\n    value: 2,\r\n    message: 'Play !'\r\n  },\r\n  WaitingForOpponentMove: {\r\n    value: 3,\r\n    message: 'Wait for opponent to play...'\r\n  },\r\n  PlayerWon: {\r\n    value: 4,\r\n    message: 'You win :)'\r\n  },\r\n  OpponentWon: {\r\n    value: 5,\r\n    message: 'You loose :('\r\n  },\r\n  Draw: {\r\n    value: 6,\r\n    message: 'Draw :/'\r\n  },\r\n})\r\n\r\nconst GameModes = {\r\n  OnePlayer: 0,\r\n  TwoPlayer: 1,\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const socket = io(config.serverUrl)\r\n\r\n    this.state = {\r\n      gameMode: null,\r\n      gameMatrix: [],\r\n      socket,\r\n      gameId: null,\r\n      playerId: null,\r\n      status: GameStatuses.WaitingForConnection.value\r\n    };\r\n\r\n    // wait for server connection and game to be joined\r\n    const that = this\r\n    socket.on('connect', function () {\r\n      socket.on('player_joined_game', (data) => {\r\n\r\n        // if current player is joining the game (i.e. not player id has been defined yet)\r\n        if (that.state.playerId === null) {\r\n\r\n          // create a matrix made of \"null\"\r\n          const gameMatrix = Array.from(\r\n            {length: data.game_matrix_size},\r\n            e => Array.from(\r\n              {length: data.game_matrix_size},\r\n              e => null\r\n            )\r\n          );\r\n\r\n          that.setState({\r\n            playerId: data.player_id,\r\n            gameId: data.game_id,\r\n            gameMatrix,\r\n          })\r\n        }\r\n\r\n        // update game status\r\n        let status\r\n        if (data.game_is_full) {\r\n          status = that.state.playerId === 0 ? GameStatuses.WaitingForPlayerMove.value : GameStatuses.WaitingForOpponentMove.value\r\n        } else {\r\n          status = GameStatuses.WaitingForOpponentToConnect.value\r\n        }\r\n        that.setState({status})\r\n      })\r\n    });\r\n\r\n    // update component when a piece is added\r\n    socket.on('piece_added', (data) => {\r\n\r\n      // duplicate and update game matrix\r\n      const editedGameTable = [...this.state.gameMatrix]\r\n      editedGameTable[data.row][data.column] = data.player_id\r\n\r\n      // update game status\r\n      let status\r\n      if (data.game_is_draw) {\r\n        status = GameStatuses.Draw.value\r\n      } else if (data.game_is_won) {\r\n        if (that.state.playerId === data.player_id) {\r\n          status = GameStatuses.PlayerWon.value\r\n        } else {\r\n          status = GameStatuses.OpponentWon.value\r\n        }\r\n      } else {\r\n        if (that.state.playerId === data.player_id) {\r\n          status = GameStatuses.WaitingForOpponentMove.value\r\n        } else {\r\n          status = GameStatuses.WaitingForPlayerMove.value\r\n        }\r\n      }\r\n      this.setState({gameMatrix: editedGameTable, status})\r\n    })\r\n  }\r\n\r\n\r\n  joinGameClicked(gameMode) {\r\n    this.state.gameMode = gameMode\r\n    this.state.socket.emit('join', {gameMode})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"game\">\r\n        <div id=\"header\">\r\n          <div id=\"title\">Side Stacker</div>\r\n          {this.state.gameMode === null\r\n            ? <StartupHeader joinFunction={this.joinGameClicked.bind(this)}/>\r\n            : <GameBoard parentState={this.state}/>\r\n          }\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nclass StartupHeader extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <input type=\"button\" className=\"joinButton\" value=\"1 player\"\r\n                 onClick={() => this.props.joinFunction(GameModes.OnePlayer)}/>\r\n          <input type=\"button\" className=\"joinButton\" value=\"2 player\"\r\n                 onClick={() => this.props.joinFunction(GameModes.TwoPlayer)}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass GameBoard extends React.Component {\r\n  addButtonClicked(rowIndex, side) {\r\n    // notify server for player move (if player is allowed to play)\r\n    if (this.props.parentState.status === GameStatuses.WaitingForPlayerMove.value) {\r\n      this.props.parentState.socket.emit('add_piece', {rowIndex, side})\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    // list playable row in game matrix (i.e. one with no remaining null values)\r\n    const playableRows = []\r\n    for (const row of this.props.parentState.gameMatrix) {\r\n      const playable = row.indexOf(null) !== -1\r\n      playableRows.push(playable)\r\n    }\r\n\r\n    // get status message from game status\r\n    const statusKey = Object.keys(GameStatuses).find((key) => {\r\n      return GameStatuses[key].value === this.props.parentState.status\r\n    })\r\n    const statusMessage = GameStatuses[statusKey].message\r\n\r\n    // check if user can play\r\n    const canPlay = this.props.parentState.status === GameStatuses.WaitingForPlayerMove.value\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div id=\"details\">\r\n            <div>Game ID: {this.props.parentState.gameId}</div>\r\n          </div>\r\n          <div id=\"playerHeader\">\r\n            <PlayerInfo playerId={0} currentPlayer={this.props.parentState.playerId}/>\r\n            <PlayerInfo playerId={1} currentPlayer={this.props.parentState.playerId}/>\r\n          </div>\r\n          <div id=\"info\">\r\n            {statusMessage}\r\n          </div>\r\n        </div>\r\n        <div id=\"board\">\r\n          {this.props.parentState.gameMatrix.map((row, rowIndex) => (\r\n            <div className='row' key={rowIndex}>\r\n\r\n              <AddPieceButton side={0}\r\n                              enabled={canPlay && playableRows[rowIndex]}\r\n                              clickHandler={() => this.addButtonClicked(rowIndex, 0)}/>\r\n\r\n              {row.map((column, columnIndex) => (\r\n                <div key={columnIndex}\r\n                     className={\r\n                       classNames({\r\n                         cell: true,\r\n                         player0: this.props.parentState.gameMatrix[rowIndex][columnIndex] === 0,\r\n                         player1: this.props.parentState.gameMatrix[rowIndex][columnIndex] === 1,\r\n                       })\r\n                     }>\r\n                </div>\r\n              ))}\r\n\r\n              <AddPieceButton side={1}\r\n                              enabled={canPlay && playableRows[rowIndex]}\r\n                              clickHandler={() => this.addButtonClicked(rowIndex, 1)}/>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass PlayerInfo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classNames({\r\n        playerStats: true,\r\n        player0: this.props.playerId === 0,\r\n        player1: this.props.playerId === 1,\r\n      })}>\r\n        <div>\r\n          Player {this.props.playerId + 1}\r\n          {this.props.playerId === this.props.currentPlayer &&\r\n          <span className=\"currentPlayerYouString\">(you)</span>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass AddPieceButton extends React.Component {\r\n  render() {\r\n    const symbol = this.props.side === 0 ? '▶' : '◀'\r\n    return (\r\n      <div className={classNames({button: true, enabled: this.props.enabled})}\r\n           onClick={this.props.clickHandler}>\r\n        {symbol}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}